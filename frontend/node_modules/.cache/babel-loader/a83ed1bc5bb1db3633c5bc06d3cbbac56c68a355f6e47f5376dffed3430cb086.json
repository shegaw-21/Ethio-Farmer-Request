{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithCustomToken, onAuthStateChanged, signInAnonymously } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\n\n// The following global variables are provided by the Canvas environment.\n// We must always use them for Firebase setup.\nconst appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\nconst firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};\nconst initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : '';\n\n// ----------------------\n// Firebase Initialization\n// ----------------------\n// Initialize Firebase app and services\nconst app = initializeApp(firebaseConfig);\nexport const db = getFirestore(app);\nexport const auth = getAuth(app);\n\n// ----------------------\n// Custom Auth Hook\n// ----------------------\n// This hook centralizes all Firebase authentication logic.\nexport const useAuth = () => {\n  _s();\n  const [authReady, setAuthReady] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  // Use simulatedUser for the role/location logic\n  const [simulatedUser, setSimulatedUser] = useState(null);\n  useEffect(() => {\n    const initFirebase = async () => {\n      try {\n        if (initialAuthToken) {\n          await signInWithCustomToken(auth, initialAuthToken);\n        } else {\n          await signInAnonymously(auth);\n        }\n      } catch (error) {\n        console.error(\"Firebase sign-in failed:\", error);\n      }\n    };\n    initFirebase();\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      setCurrentUser(user);\n      setAuthReady(true);\n    });\n    return () => unsubscribe();\n  }, []);\n  return {\n    currentUser,\n    simulatedUser,\n    setSimulatedUser,\n    authReady\n  };\n};\n_s(useAuth, \"cCCPZcR2Xx9qapNms5BIhLye5NE=\");","map":{"version":3,"names":["useState","useEffect","initializeApp","getAuth","signInWithCustomToken","onAuthStateChanged","signInAnonymously","getFirestore","appId","__app_id","firebaseConfig","__firebase_config","JSON","parse","initialAuthToken","__initial_auth_token","app","db","auth","useAuth","_s","authReady","setAuthReady","currentUser","setCurrentUser","simulatedUser","setSimulatedUser","initFirebase","error","console","unsubscribe","user"],"sources":["D:/FARMERS/frontend/src/components/Header.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, signInWithCustomToken, onAuthStateChanged, signInAnonymously } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\n\r\n// The following global variables are provided by the Canvas environment.\r\n// We must always use them for Firebase setup.\r\nconst appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\nconst firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};\r\nconst initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : '';\r\n\r\n// ----------------------\r\n// Firebase Initialization\r\n// ----------------------\r\n// Initialize Firebase app and services\r\nconst app = initializeApp(firebaseConfig);\r\nexport const db = getFirestore(app);\r\nexport const auth = getAuth(app);\r\n\r\n// ----------------------\r\n// Custom Auth Hook\r\n// ----------------------\r\n// This hook centralizes all Firebase authentication logic.\r\nexport const useAuth = () => {\r\n    const [authReady, setAuthReady] = useState(false);\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n    // Use simulatedUser for the role/location logic\r\n    const [simulatedUser, setSimulatedUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const initFirebase = async() => {\r\n            try {\r\n                if (initialAuthToken) {\r\n                    await signInWithCustomToken(auth, initialAuthToken);\r\n                } else {\r\n                    await signInAnonymously(auth);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Firebase sign-in failed:\", error);\r\n            }\r\n        };\r\n\r\n        initFirebase();\r\n\r\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n            setCurrentUser(user);\r\n            setAuthReady(true);\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    return { currentUser, simulatedUser, setSimulatedUser, authReady };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,qBAAqB,EAAEC,kBAAkB,EAAEC,iBAAiB,QAAQ,eAAe;AACrG,SAASC,YAAY,QAAQ,oBAAoB;;AAEjD;AACA;AACA,MAAMC,KAAK,GAAG,OAAOC,QAAQ,KAAK,WAAW,GAAGA,QAAQ,GAAG,gBAAgB;AAC3E,MAAMC,cAAc,GAAG,OAAOC,iBAAiB,KAAK,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACF,iBAAiB,CAAC,GAAG,CAAC,CAAC;AACpG,MAAMG,gBAAgB,GAAG,OAAOC,oBAAoB,KAAK,WAAW,GAAGA,oBAAoB,GAAG,EAAE;;AAEhG;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAGd,aAAa,CAACQ,cAAc,CAAC;AACzC,OAAO,MAAMO,EAAE,GAAGV,YAAY,CAACS,GAAG,CAAC;AACnC,OAAO,MAAME,IAAI,GAAGf,OAAO,CAACa,GAAG,CAAC;;AAEhC;AACA;AACA;AACA;AACA,OAAO,MAAMG,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACpD;EACA,MAAM,CAACyB,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAExDC,SAAS,CAAC,MAAM;IACZ,MAAM0B,YAAY,GAAG,MAAAA,CAAA,KAAW;MAC5B,IAAI;QACA,IAAIb,gBAAgB,EAAE;UAClB,MAAMV,qBAAqB,CAACc,IAAI,EAAEJ,gBAAgB,CAAC;QACvD,CAAC,MAAM;UACH,MAAMR,iBAAiB,CAACY,IAAI,CAAC;QACjC;MACJ,CAAC,CAAC,OAAOU,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ,CAAC;IAEDD,YAAY,CAAC,CAAC;IAEd,MAAMG,WAAW,GAAGzB,kBAAkB,CAACa,IAAI,EAAGa,IAAI,IAAK;MACnDP,cAAc,CAACO,IAAI,CAAC;MACpBT,YAAY,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC;IAEF,OAAO,MAAMQ,WAAW,CAAC,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEP,WAAW;IAAEE,aAAa;IAAEC,gBAAgB;IAAEL;EAAU,CAAC;AACtE,CAAC;AAACD,EAAA,CA9BWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}