{"ast":null,"code":"// index.js\n\n// Import necessary packages\nconst express = require('express');\nconst mysql = require('mysql2/promise');\nconst dotenv = require('dotenv');\nconst cors = require('cors'); // <-- Import the cors package\n\n// Load environment variables from the .env file\ndotenv.config();\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Middleware to parse JSON bodies\napp.use(express.json());\n\n// Add CORS middleware to allow cross-origin requests\n// This allows your frontend (e.g., on port 3001) to talk to your backend\napp.use(cors());\n\n// Create the MySQL connection pool\nlet pool;\nasync function connectToDatabase() {\n  try {\n    // Create the connection pool using the new DB_ prefixed environment variables\n    pool = await mysql.createPool({\n      host: process.env.DB_HOST,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_DATABASE,\n      port: process.env.DB_PORT,\n      // Added the port from your .env file\n      // Use a pool to manage multiple connections efficiently\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0\n    });\n    console.log('Database connection successful!');\n\n    // Optional: Check if a connection is successful by getting a connection from the pool\n    const connection = await pool.getConnection();\n    connection.release();\n    console.log('Successfully acquired and released a connection from the pool.');\n  } catch (error) {\n    // Log the error and exit the process if the database connection fails\n    console.error('Database connection failed:', error.message);\n    process.exit(1);\n  }\n}\n\n// Immediately try to connect to the database when the server starts\nconnectToDatabase();\n\n// Define a simple GET endpoint to fetch all admins from the 'admins' table\n// This uses the table name \"admins\" from your screenshot.\napp.get('/admins', async (req, res) => {\n  try {\n    // Execute a query to get all rows from the admins table\n    const [rows, fields] = await pool.query('SELECT * FROM admins');\n    // Send the query results as a JSON response\n    res.status(200).json(rows);\n  } catch (error) {\n    console.error('Error fetching admins:', error.message);\n    res.status(500).json({\n      error: 'Failed to fetch admins.'\n    });\n  }\n});\n\n// Basic route to check if the server is running\napp.get('/', (req, res) => {\n  res.status(200).send('Server is up and running!');\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","mysql","dotenv","cors","config","app","port","process","env","PORT","use","json","pool","connectToDatabase","createPool","host","DB_HOST","user","DB_USER","password","DB_PASSWORD","database","DB_DATABASE","DB_PORT","waitForConnections","connectionLimit","queueLimit","console","log","connection","getConnection","release","error","message","exit","get","req","res","rows","fields","query","status","send","listen"],"sources":["D:/FARMERS/frontend/src/index.js"],"sourcesContent":["// index.js\n\n// Import necessary packages\nconst express = require('express');\nconst mysql = require('mysql2/promise');\nconst dotenv = require('dotenv');\nconst cors = require('cors'); // <-- Import the cors package\n\n// Load environment variables from the .env file\ndotenv.config();\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Middleware to parse JSON bodies\napp.use(express.json());\n\n// Add CORS middleware to allow cross-origin requests\n// This allows your frontend (e.g., on port 3001) to talk to your backend\napp.use(cors());\n\n// Create the MySQL connection pool\nlet pool;\n\nasync function connectToDatabase() {\n    try {\n        // Create the connection pool using the new DB_ prefixed environment variables\n        pool = await mysql.createPool({\n            host: process.env.DB_HOST,\n            user: process.env.DB_USER,\n            password: process.env.DB_PASSWORD,\n            database: process.env.DB_DATABASE,\n            port: process.env.DB_PORT, // Added the port from your .env file\n            // Use a pool to manage multiple connections efficiently\n            waitForConnections: true,\n            connectionLimit: 10,\n            queueLimit: 0\n        });\n\n        console.log('Database connection successful!');\n\n        // Optional: Check if a connection is successful by getting a connection from the pool\n        const connection = await pool.getConnection();\n        connection.release();\n        console.log('Successfully acquired and released a connection from the pool.');\n\n    } catch (error) {\n        // Log the error and exit the process if the database connection fails\n        console.error('Database connection failed:', error.message);\n        process.exit(1);\n    }\n}\n\n// Immediately try to connect to the database when the server starts\nconnectToDatabase();\n\n// Define a simple GET endpoint to fetch all admins from the 'admins' table\n// This uses the table name \"admins\" from your screenshot.\napp.get('/admins', async(req, res) => {\n    try {\n        // Execute a query to get all rows from the admins table\n        const [rows, fields] = await pool.query('SELECT * FROM admins');\n        // Send the query results as a JSON response\n        res.status(200).json(rows);\n    } catch (error) {\n        console.error('Error fetching admins:', error.message);\n        res.status(500).json({ error: 'Failed to fetch admins.' });\n    }\n});\n\n// Basic route to check if the server is running\napp.get('/', (req, res) => {\n    res.status(200).send('Server is up and running!');\n});\n\n// Start the server\napp.listen(port, () => {\n    console.log(`Server is running on http://localhost:${port}`);\n});"],"mappings":"AAAA;;AAEA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACvC,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;;AAE9B;AACAE,MAAM,CAACE,MAAM,CAAC,CAAC;AAEf,MAAMC,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrB,MAAMO,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACC,IAAI,IAAI,IAAI;;AAErC;AACAJ,GAAG,CAACK,GAAG,CAACX,OAAO,CAACY,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACA;AACAN,GAAG,CAACK,GAAG,CAACP,IAAI,CAAC,CAAC,CAAC;;AAEf;AACA,IAAIS,IAAI;AAER,eAAeC,iBAAiBA,CAAA,EAAG;EAC/B,IAAI;IACA;IACAD,IAAI,GAAG,MAAMX,KAAK,CAACa,UAAU,CAAC;MAC1BC,IAAI,EAAER,OAAO,CAACC,GAAG,CAACQ,OAAO;MACzBC,IAAI,EAAEV,OAAO,CAACC,GAAG,CAACU,OAAO;MACzBC,QAAQ,EAAEZ,OAAO,CAACC,GAAG,CAACY,WAAW;MACjCC,QAAQ,EAAEd,OAAO,CAACC,GAAG,CAACc,WAAW;MACjChB,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACe,OAAO;MAAE;MAC3B;MACAC,kBAAkB,EAAE,IAAI;MACxBC,eAAe,EAAE,EAAE;MACnBC,UAAU,EAAE;IAChB,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;IAE9C;IACA,MAAMC,UAAU,GAAG,MAAMjB,IAAI,CAACkB,aAAa,CAAC,CAAC;IAC7CD,UAAU,CAACE,OAAO,CAAC,CAAC;IACpBJ,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;EAEjF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZ;IACAL,OAAO,CAACK,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC3D1B,OAAO,CAAC2B,IAAI,CAAC,CAAC,CAAC;EACnB;AACJ;;AAEA;AACArB,iBAAiB,CAAC,CAAC;;AAEnB;AACA;AACAR,GAAG,CAAC8B,GAAG,CAAC,SAAS,EAAE,OAAMC,GAAG,EAAEC,GAAG,KAAK;EAClC,IAAI;IACA;IACA,MAAM,CAACC,IAAI,EAAEC,MAAM,CAAC,GAAG,MAAM3B,IAAI,CAAC4B,KAAK,CAAC,sBAAsB,CAAC;IAC/D;IACAH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC9B,IAAI,CAAC2B,IAAI,CAAC;EAC9B,CAAC,CAAC,OAAON,KAAK,EAAE;IACZL,OAAO,CAACK,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACC,OAAO,CAAC;IACtDI,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC9B,IAAI,CAAC;MAAEqB,KAAK,EAAE;IAA0B,CAAC,CAAC;EAC9D;AACJ,CAAC,CAAC;;AAEF;AACA3B,GAAG,CAAC8B,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACvBA,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,2BAA2B,CAAC;AACrD,CAAC,CAAC;;AAEF;AACArC,GAAG,CAACsC,MAAM,CAACrC,IAAI,EAAE,MAAM;EACnBqB,OAAO,CAACC,GAAG,CAAC,yCAAyCtB,IAAI,EAAE,CAAC;AAChE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}